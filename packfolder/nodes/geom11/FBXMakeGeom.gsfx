
struct VSOut
{
	float3 pos : POSITION;
	float3 norm : NORMAL;
	float3 prevpos : PREVPOS;
	float2 uv0 : TEXCOORD0;
	float2 uv1 : TEXCOORD1;
	float2 uv2 : TEXCOORD2;
	float2 uv3 : TEXCOORD3;
	float2 uv4 : TEXCOORD4;
	float2 uv5 : TEXCOORD5;
	float2 uv6 : TEXCOORD6;
	float2 uv7 : TEXCOORD7;
	float2 uv8 : TEXCOORD8;
	float2 uv9 : TEXCOORD9;
	float4 tangent : TANGENT;
	float4 binorm : BINORMAL;
	uint ssmatid : SUBSETMATID_USHORT;
	uint4 boneindices : BONEINDICES;
	float4 boneweights : BONEWEIGHTS;
};

GSin VS(uint vid : SV_VertexID)
{
    GSin output;
    output.cpoint = input.cpoint;
	output.norm = input.norm;
	#if defined(TEXCOORD_IN) && defined(TEXCOORD_OUT)
		output.TexCd = input.TexCd;
	#endif
	#if defined(TANGENTS_IN) && defined(TANGENTS_OUT)
		output.Tangent = input.Tangent;
		output.Binormal = input.Binormal;
	#endif
	#if defined(BLENDWEIGHTS_IN) && defined(BLENDWEIGHTS_OUT)
		output.BlendId = input.BlendId;
		output.BlendWeight = input.BlendWeight;
	#endif
	#if defined(PREVPOS_IN) && defined(PREVPOS_OUT)
		output.PrevPos = input.PrevPos;
	#endif
	#if defined(SUBSETID_IN) && defined(SUBSETID_OUT)
		output.SubsetID = input.SubsetID;
	#endif
	
    return output;
}
[maxvertexcount(3)]
void GS(triangle GSin input[3], inout TriangleStream<GSin>GSOut)
{
	GSin v = (GSin)0;

	for(uint i=0;i<3;i++)
	{
		v=input[i];
		GSOut.Append(v);
	}
}

GeometryShader StreamOutGS = ConstructGSWithSO( CompileShader( gs_5_0, GS() ),
	"POSITION.xyz;"
	"NORMAL.xyz"
	#if defined(TEXCOORD_OUT)
		";TEXCOORD0.xy"
	#endif
	#if defined(TANGENTS_OUT)
		";TANGENT.xyz"
		";BINORMAL.xyz"
	#endif
	#if defined(BLENDWEIGHTS_OUT)
		";BLENDINDICES.xyzw"
		";BLENDWEIGHT.xyzw"
	#endif
	#if defined(PREVPOS_OUT)
		";PREVPOS.xyz"
	#endif
	#if defined(SUBSETID_OUT)
		";SUBSETID.x"
	#endif
);

technique11 Layout
{
	pass P0
	{
		
		SetVertexShader( CompileShader( vs_5_0, VS() ) );
		SetGeometryShader( CompileShader( gs_5_0, GS() ) );
	    SetGeometryShader( StreamOutGS );

	}
}